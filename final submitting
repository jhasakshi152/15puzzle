import math
import time
from queue import PriorityQueue


puzzle_size = 16
n_nodes = 0


class Node:
    def __init__(self, state, parent, operator, depth, path_cost):
        self.state = state
        self.parent = parent
        self.children = list()
        self.operator = operator
        self.depth= depth
        self.path_cost = path_cost


    def __lt__(self, other):
        return self.path_cost < other.path_cost


    def is_samePuzzle(self, state):
        if self.state == state:
            return True
        else:
            return False


    def move(self):
        new_state = self.state[:]
        blank_index = self.state.index(0)
        global n_nodes

        if blank_index not in [0, 1, 2, 3]: # UP
            tmp = new_state[blank_index - 4]
            new_state[blank_index - 4] = new_state[blank_index]
            new_state[blank_index] = tmp
            child = Node(new_state, self, "Up", self.depth + 1, self.path_cost)
            self.children.append(child)
            n_nodes += 1

        new_state = self.state[:]
        if blank_index not in [12, 13, 14, 15]:  # DOWN
            tmp = new_state[blank_index + 4]
            new_state[blank_index + 4] = new_state[blank_index]
            new_state[blank_index] = tmp
            child = Node(new_state, self, "Down", self.depth + 1, self.path_cost)
            self.children.append(child)
            n_nodes += 1

        new_state = self.state[:]
        if blank_index not in [0, 4, 8, 12]:  # LEFT
            tmp = new_state[blank_index - 1]
            new_state[blank_index - 1] = new_state[blank_index]
            new_state[blank_index] = tmp
            child = Node(new_state, self, "Left", self.depth + 1, self.path_cost)
            self.children.append(child)
            n_nodes += 1

        new_state = self.state[:]
        if blank_index not in [3, 7, 11, 15]:  # RIGHT
            tmp = new_state[blank_index + 1]
            new_state[blank_index + 1] = new_state[blank_index]
            new_state[blank_index] = tmp
            child = Node(new_state, self, "Right", self.depth + 1, self.path_cost)
            self.children.append(child)
            n_nodes += 1






def has_solution(config):
    n_inv = 0
    blank_row = math.ceil((16 - config.index(0)) / 4)
    for i in range(0, puzzle_size):
        for j in range(i+1, puzzle_size):
            if config[i] > config[j] and config[j] != 0:
                n_inv += 1
    return (blank_row % 2 != 0) == (n_inv % 2 == 0)
    


def A_Star(initialConfig, finalConfig, heuristic):
    pq = PriorityQueue()
    pq.put(Node(initialConfig, None, "", 0, 0))
    GoalFound = False

    while pq and not GoalFound:
        node = pq.get()
        node.move()
        for child in node.children:
            if child.is_samePuzzle(finalConfig):
                print("Goal Found!")
                GoalFound = True
                path_solution(child)
            if heuristic == '1':
                cost = child.depth + heuristic_misplace(child.state,
                                                        finalConfig)
                child.path_cost = cost
            else:
                cost = child.depth + heuristic_manhattan(child.state, 
                                                         finalConfig)
                child.path_cost = cost
            pq.put(child, cost)


def heuristic_manhattan(state, finalConfig):
    cont = 0
    for i in range(0, 16):
        cont += manhattan_aux(state.index(i), finalConfig.index(i))
    return cont


def manhattan_aux(i, j):
    # Used to obtain the matrix coordinates from the state list.
    matrix_ij = {0: (1, 1), 0.25: (1, 2), 0.50: (1, 3), 0.75: (1, 4),
                 1: (2, 1), 1.25: (2, 2), 1.50: (2, 3), 1.75: (2, 4),
                 2: (3, 1), 2.25: (3, 2), 2.50: (3, 3), 2.75: (3, 4),
                 3: (4, 1), 3.25: (4, 2), 3.50: (4, 3), 3.75: (4, 4)}

    x1, y1 = matrix_ij[i/4]
    x2, y2 = matrix_ij[j/4]
    return abs(x1-x2) + abs(y1-y2)


def heuristic_misplace(state, finalConfig):
    h = 0
    for i in range(0, 16):
        if state[i] != finalConfig[i]:
            h += 1
    return h


def contains(listNode, Node):
    contains = False
    for node in listNode:
        if(node.is_samePuzzle(Node.state)):
            contains = True
    return contains


def path_solution(Node):
    node = Node
    directions = list()
    directions.append(node.operator)
    depth = node.depth
    while node.parent is not None:
        node = node.parent
        directions.append(node.operator)
    directions.pop()
    print("Path to solution: ", end="")
    print(directions)
    print("Depth: %d" % depth)


def execute(initialConfig, finalConfig, heuristic):
    print("Finding Path to Solution...")
    start  = time.time()
    global n_nodes

   
    end = time.time()
        


def main():
    initialConfig = list(map(int, input("Initial Configuration: ").split()))
    finalConfig = list(map(int, input("Final Configuration: ").split()))
    if not (has_solution(initialConfig) == has_solution(finalConfig)):
        print("This 15 puzzle has no solution.")
    else:
        print("This 15 puzzle has solution.")
        heuristic = 0
        A_Star(initialConfig, finalConfig, heuristic)
        execute( initialConfig, finalConfig, heuristic)


        
if __name__ == '__main__':
    main()

